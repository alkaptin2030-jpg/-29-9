var p=Object.defineProperty;var g=(l,t,r)=>t in l?p(l,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):l[t]=r;var m=(l,t,r)=>g(l,typeof t!="symbol"?t+"":t,r);import{reportsService as a}from"./reportsService-Bp1Io21u.js";import{M as T}from"./masterPinService-B5aWu8_y.js";class w{static getProfitPinKey(t){return t?`${this.PROFIT_PIN_KEY_BASE}_${t}`:this.PROFIT_PIN_KEY_BASE}static setProfitPin(t,r){console.warn("setProfitPin is deprecated. Using master PIN instead.")}static hasProfitPin(t){return T.hasMasterPin()}static verifyProfitPin(t,r){return T.verifyMasterPin(t)}static getProfitData(t){a.autoResetReportsIfNeeded(t);const r=a.getProfits(t),i=this.getWithdrawTransferProfits(t);return{dailyProfit:r.dailyProfit,monthlyProfit:r.monthlyProfit,dailyWithdrawProfit:i.dailyWithdrawProfit,monthlyWithdrawProfit:i.monthlyWithdrawProfit,dailyTransferProfit:i.dailyTransferProfit,monthlyTransferProfit:i.monthlyTransferProfit,lastUpdated:new Date}}static addProfit(t,r){a.addProfit(t,"daily",r),a.addProfit(t,"monthly",r)}static calculateProfitFromTransaction(t){return a.calculateTransactionProfit(t)}static resetProfits(t,r,i){if(!this.verifyProfitPin(r,i))return!1;const n=i?`reportsData_${i}`:"reportsData",o=a.getReportsData(i);return t==="daily"?(o.dailyProfit=0,o.lastDailyProfitResetDate=new Date):(o.monthlyProfit=0,o.lastMonthlyProfitResetDate=new Date),localStorage.setItem(n,JSON.stringify(o)),!0}static clearProfitPin(t){localStorage.removeItem(this.getProfitPinKey(t))}static updateProfitsFromTransactions(t,r){const i=r?`reportsData_${r}`:"reportsData",n=a.getReportsData(r);let o=0,c=0;const f=new Date,P=f.getMonth(),h=f.getFullYear(),y=a.filterVisibleTransactions(t,"daily",r),d=a.filterVisibleTransactions(t,"monthly",r);y.forEach(s=>{new Date(s.createdAt).toDateString()===f.toDateString()&&(o+=this.calculateProfitFromTransaction(s))}),d.forEach(s=>{const e=new Date(s.createdAt);e.getMonth()===P&&e.getFullYear()===h&&(c+=this.calculateProfitFromTransaction(s))}),n.dailyProfit=Math.round(o*100)/100,n.monthlyProfit=Math.round(c*100)/100,localStorage.setItem(i,JSON.stringify(n))}static getWithdrawTransferProfits(t){a.getReportsData(t);const r=new Date,i=r.getMonth(),n=r.getFullYear(),o=t?`transactions_${t}`:"transactions",c=JSON.parse(localStorage.getItem(o)||"[]");let f=0,P=0,h=0,y=0;const d=a.filterVisibleTransactions(c,"daily",t),s=a.filterVisibleTransactions(c,"monthly",t);return d.forEach(e=>{new Date(e.createdAt).toDateString()===r.toDateString()&&(e.type==="withdraw"?f+=this.calculateProfitFromTransaction(e):(e.type==="receive"||e.type==="send")&&(h+=this.calculateProfitFromTransaction(e)))}),s.forEach(e=>{const D=new Date(e.createdAt);D.getMonth()===i&&D.getFullYear()===n&&(e.type==="withdraw"?P+=this.calculateProfitFromTransaction(e):(e.type==="receive"||e.type==="send")&&(y+=this.calculateProfitFromTransaction(e)))}),{dailyWithdrawProfit:Math.round(f*100)/100,monthlyWithdrawProfit:Math.round(P*100)/100,dailyTransferProfit:Math.round(h*100)/100,monthlyTransferProfit:Math.round(y*100)/100}}}m(w,"PROFIT_PIN_KEY_BASE","profit_pin");export{w as ProfitService};
