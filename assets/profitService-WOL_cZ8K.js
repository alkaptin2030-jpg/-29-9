var T=Object.defineProperty;var p=(l,t,e)=>t in l?T(l,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[t]=e;var m=(l,t,e)=>p(l,typeof t!="symbol"?t+"":t,e);import{reportsService as i}from"./reportsService-Bp1Io21u.js";class D{static getProfitPinKey(t){return t?`${this.PROFIT_PIN_KEY_BASE}_${t}`:this.PROFIT_PIN_KEY_BASE}static getMasterPinKey(t){return t?`${this.MASTER_PIN_KEY_BASE}_${t}`:this.MASTER_PIN_KEY_BASE}static setProfitPin(t,e){console.warn("setProfitPin is deprecated. Using master PIN instead.")}static hasProfitPin(t){try{const e=localStorage.getItem(this.getMasterPinKey(t));return!!e&&e.length>0}catch{return!1}}static verifyProfitPin(t,e){try{const a=localStorage.getItem(this.getMasterPinKey(e));return a?atob(a)===t:!1}catch{return!1}}static getProfitData(t){i.autoResetReportsIfNeeded(t);const e=i.getProfits(t),a=this.getWithdrawTransferProfits(t);return{dailyProfit:e.dailyProfit,monthlyProfit:e.monthlyProfit,dailyWithdrawProfit:a.dailyWithdrawProfit,monthlyWithdrawProfit:a.monthlyWithdrawProfit,dailyTransferProfit:a.dailyTransferProfit,monthlyTransferProfit:a.monthlyTransferProfit,lastUpdated:new Date}}static addProfit(t,e){i.addProfit(t,"daily",e),i.addProfit(t,"monthly",e)}static calculateProfitFromTransaction(t){return i.calculateTransactionProfit(t)}static resetProfits(t,e,a){if(!this.verifyProfitPin(e,a))return!1;const n=a?`reportsData_${a}`:"reportsData",o=i.getReportsData(a);return t==="daily"?(o.dailyProfit=0,o.lastDailyProfitResetDate=new Date):(o.monthlyProfit=0,o.lastMonthlyProfitResetDate=new Date),localStorage.setItem(n,JSON.stringify(o)),!0}static clearProfitPin(t){localStorage.removeItem(this.getProfitPinKey(t))}static updateProfitsFromTransactions(t,e){const a=e?`reportsData_${e}`:"reportsData",n=i.getReportsData(e);let o=0,c=0;const f=new Date,P=f.getMonth(),h=f.getFullYear(),y=i.filterVisibleTransactions(t,"daily",e),d=i.filterVisibleTransactions(t,"monthly",e);y.forEach(s=>{new Date(s.createdAt).toDateString()===f.toDateString()&&(o+=this.calculateProfitFromTransaction(s))}),d.forEach(s=>{const r=new Date(s.createdAt);r.getMonth()===P&&r.getFullYear()===h&&(c+=this.calculateProfitFromTransaction(s))}),n.dailyProfit=Math.round(o*100)/100,n.monthlyProfit=Math.round(c*100)/100,localStorage.setItem(a,JSON.stringify(n))}static getWithdrawTransferProfits(t){i.getReportsData(t);const e=new Date,a=e.getMonth(),n=e.getFullYear(),o=t?`transactions_${t}`:"transactions",c=JSON.parse(localStorage.getItem(o)||"[]");let f=0,P=0,h=0,y=0;const d=i.filterVisibleTransactions(c,"daily",t),s=i.filterVisibleTransactions(c,"monthly",t);return d.forEach(r=>{new Date(r.createdAt).toDateString()===e.toDateString()&&(r.type==="withdraw"?f+=this.calculateProfitFromTransaction(r):(r.type==="receive"||r.type==="send")&&(h+=this.calculateProfitFromTransaction(r)))}),s.forEach(r=>{const g=new Date(r.createdAt);g.getMonth()===a&&g.getFullYear()===n&&(r.type==="withdraw"?P+=this.calculateProfitFromTransaction(r):(r.type==="receive"||r.type==="send")&&(y+=this.calculateProfitFromTransaction(r)))}),{dailyWithdrawProfit:Math.round(f*100)/100,monthlyWithdrawProfit:Math.round(P*100)/100,dailyTransferProfit:Math.round(h*100)/100,monthlyTransferProfit:Math.round(y*100)/100}}}m(D,"PROFIT_PIN_KEY_BASE","profit_pin"),m(D,"MASTER_PIN_KEY_BASE","master_pin");export{D as ProfitService};
