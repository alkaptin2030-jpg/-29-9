import{i as l,k as o,E as s,p as d,n as y,T as h}from"./index-B4rr4Fr9.js";const c={getCurrentDayId(){const e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}-${String(e.getDate()).padStart(2,"0")}`},async setLimits(e,t){try{const i=l(o,"walletLimits",e),r={updatedAt:s()};return t.dailyTransferLimit!==void 0&&(r.dailyTransferLimit=t.dailyTransferLimit),t.dailyWithdrawLimit!==void 0&&(r.dailyWithdrawLimit=t.dailyWithdrawLimit),t.monthlyTransferLimit!==void 0&&(r.monthlyTransferLimit=t.monthlyTransferLimit),t.monthlyWithdrawLimit!==void 0&&(r.monthlyWithdrawLimit=t.monthlyWithdrawLimit),await d(i,r,{merge:!0}),await this.getWalletLimits(e)}catch(i){return console.error("خطأ في تحديث حدود المحفظة:",i),null}},getCurrentMonthId(){const e=new Date;return`${e.getFullYear()}-${String(e.getMonth()+1).padStart(2,"0")}`},shouldResetDailyLimits(e){if(!e)return!0;const t=new Date,i=e.toDate();return t.getDate()!==i.getDate()||t.getMonth()!==i.getMonth()||t.getFullYear()!==i.getFullYear()},shouldResetMonthlyLimits(e){if(!e)return!0;const t=new Date,i=e.toDate();return t.getMonth()!==i.getMonth()||t.getFullYear()!==i.getFullYear()},async getWalletLimits(e){try{const t=l(o,"walletLimits",e),i=await y(t);if(i.exists()){const a=i.data();return{walletId:e,dailyTransferLimit:a.dailyTransferLimit||6e4,dailyWithdrawLimit:a.dailyWithdrawLimit||1e5,dailyTransferUsed:a.dailyTransferUsed||0,dailyWithdrawUsed:a.dailyWithdrawUsed||0,lastDailyReset:a.lastDailyReset||null,monthlyTransferLimit:a.monthlyTransferLimit||2e5,monthlyWithdrawLimit:a.monthlyWithdrawLimit||2e5,monthlyTransferUsed:a.monthlyTransferUsed||0,monthlyWithdrawUsed:a.monthlyWithdrawUsed||0,lastMonthlyReset:a.lastMonthlyReset||null,updatedAt:a.updatedAt||h.now()}}const r={walletId:e,dailyTransferLimit:6e4,dailyWithdrawLimit:1e5,dailyTransferUsed:0,dailyWithdrawUsed:0,lastDailyReset:null,monthlyTransferLimit:2e5,monthlyWithdrawLimit:2e5,monthlyTransferUsed:0,monthlyWithdrawUsed:0,lastMonthlyReset:null,updatedAt:h.now()};return await d(t,{dailyTransferLimit:6e4,dailyWithdrawLimit:1e5,dailyTransferUsed:0,dailyWithdrawUsed:0,lastDailyReset:null,monthlyTransferLimit:2e5,monthlyWithdrawLimit:2e5,monthlyTransferUsed:0,monthlyWithdrawUsed:0,lastMonthlyReset:null,updatedAt:s()}),r}catch(t){return console.error("خطأ في الحصول على حدود المحفظة:",t),null}},async resetDailyLimits(e){try{const t=l(o,"walletLimits",e);return await d(t,{dailyTransferUsed:0,dailyWithdrawUsed:0,lastDailyReset:s(),updatedAt:s()},{merge:!0}),console.log(`🔄 تم إعادة تعيين الحدود اليومية للمحفظة ${e}`),!0}catch(t){return console.error("خطأ في إعادة تعيين الحدود اليومية:",t),!1}},async resetMonthlyLimits(e){try{const t=l(o,"walletLimits",e);return await d(t,{monthlyTransferUsed:0,monthlyWithdrawUsed:0,lastMonthlyReset:s(),updatedAt:s()},{merge:!0}),console.log(`🔄 تم إعادة تعيين الحدود الشهرية للمحفظة ${e}`),!0}catch(t){return console.error("خطأ في إعادة تعيين الحدود الشهرية:",t),!1}},async autoResetLimitsIfNeeded(e){try{const t=await this.getWalletLimits(e);if(!t)return null;let i=!1;return this.shouldResetDailyLimits(t.lastDailyReset)&&(await this.resetDailyLimits(e),i=!0),this.shouldResetMonthlyLimits(t.lastMonthlyReset)&&(await this.resetMonthlyLimits(e),i=!0),i?await this.getWalletLimits(e):t}catch(t){return console.error("خطأ في التحقق التلقائي من الحدود:",t),null}},async canPerformOperation(e,t,i){try{const r=await this.autoResetLimitsIfNeeded(e);if(!r)return{canPerform:!1,message:"لا يمكن العثور على بيانات حدود المحفظة"};if(i==="transfer"){const a=r.dailyTransferLimit-r.dailyTransferUsed;if(t>a)return{canPerform:!1,message:`تجاوز الحد اليومي للتحويل. المتبقي: ${a.toLocaleString()} ج.م من أصل ${r.dailyTransferLimit.toLocaleString()} ج.م`,dailyRemaining:a,limitType:"daily"};const n=r.monthlyTransferLimit-r.monthlyTransferUsed;return t>n?{canPerform:!1,message:`تجاوز الحد الشهري للتحويل. المتبقي: ${n.toLocaleString()} ج.م من أصل ${r.monthlyTransferLimit.toLocaleString()} ج.م`,monthlyRemaining:n,limitType:"monthly"}:{canPerform:!0,dailyRemaining:a-t,monthlyRemaining:n-t}}if(i==="withdraw"){const a=r.dailyWithdrawLimit-r.dailyWithdrawUsed;if(t>a)return{canPerform:!1,message:`تجاوز الحد اليومي للسحب. المتبقي: ${a.toLocaleString()} ج.م من أصل ${r.dailyWithdrawLimit.toLocaleString()} ج.م`,dailyRemaining:a,limitType:"daily"};const n=r.monthlyWithdrawLimit-r.monthlyWithdrawUsed;return t>n?{canPerform:!1,message:`تجاوز الحد الشهري للسحب. المتبقي: ${n.toLocaleString()} ج.م من أصل ${r.monthlyWithdrawLimit.toLocaleString()} ج.م`,monthlyRemaining:n,limitType:"monthly"}:{canPerform:!0,dailyRemaining:a-t,monthlyRemaining:n-t}}return{canPerform:!1,message:"نوع العملية غير صحيح"}}catch(r){return console.error("خطأ في التحقق من إمكانية إجراء العملية:",r),{canPerform:!1,message:"خطأ في التحقق من الحدود"}}},async updateUsage(e,t,i){try{const r=await this.canPerformOperation(e,t,i);if(!r.canPerform)throw new Error(r.message||"لا يمكن إجراء العملية");const a=l(o,"walletLimits",e),n=await this.getWalletLimits(e);if(!n)throw new Error("لا يمكن العثور على بيانات حدود المحفظة");const m={updatedAt:s()};return i==="transfer"?(m.dailyTransferUsed=n.dailyTransferUsed+t,m.monthlyTransferUsed=n.monthlyTransferUsed+t):i==="withdraw"&&(m.dailyWithdrawUsed=n.dailyWithdrawUsed+t,m.monthlyWithdrawUsed=n.monthlyWithdrawUsed+t),await d(a,m,{merge:!0}),await this.getWalletLimits(e)}catch(r){throw console.error("خطأ في تحديث استخدام المحفظة:",r),r}},calculateRemaining(e){return{dailyTransferRemaining:Math.max(0,e.dailyTransferLimit-e.dailyTransferUsed),dailyWithdrawRemaining:Math.max(0,e.dailyWithdrawLimit-e.dailyWithdrawUsed),monthlyTransferRemaining:Math.max(0,e.monthlyTransferLimit-e.monthlyTransferUsed),monthlyWithdrawRemaining:Math.max(0,e.monthlyWithdrawLimit-e.monthlyWithdrawUsed)}},async resetAllLimits(e){try{const t=l(o,"walletLimits",e);return await d(t,{dailyTransferUsed:0,dailyWithdrawUsed:0,monthlyTransferUsed:0,monthlyWithdrawUsed:0,lastDailyReset:s(),lastMonthlyReset:s(),updatedAt:s()},{merge:!0}),console.log(`✅ تم إعادة تعيين جميع حدود المحفظة ${e}`),await this.getWalletLimits(e)}catch(t){return console.error("خطأ في إعادة تعيين جميع الحدود:",t),null}}};export{c as default,c as walletDailyLimitsService};
